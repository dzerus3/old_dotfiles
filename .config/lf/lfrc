# Integrates elements of
#   https://github.com/thezeroalpha/dotfiles/blob/master/lf/lfrc
#   https://github.com/BrodieRobertson/dotfiles/blob/master/config/lf/lfrc

# Remove some defaults
map c
map h
map j
map k
map l
map H
map J
map K
map L

# Movement
## Basic movement
map n updir
map e down
map i up
map o open

## Marks
#m: Create new mark
#': Move to mark
#": Remove mark

## Find
#f: Finds file forward
#F: Finds file backward
#,: Find next
#;: Find previous

# TODO: Broken
#map <c-e> scroll-down
#map <c-i> scroll-up

## Moves up and down a whole page
map E page-down
map I page-up

#gg moves to top of directory
#G  moves to bottom of directory

## Uses zoxide to change directories
map zi zi

# File manipulation
map lf push %touch<space>
map lF newfile
map ld push %mkdir<space>
map lD newfold
map lp chmod

# File manipulation
## Opens file in EDITOR
map k $$EDITOR "$f"

map r rename
map R batch_rename
map x delete

## Renames a file or dir to all-lowercase
map ~ lowercasename

#y: copy  file
#d: cut   file
#p: paste file
map P mergedirs

## Clears copy and cut buffer
map <enter> clear

## Archive Mappings
map az zip
map at tar
map ag targz
map ab tarbz
map au unarchive

# File view
#t: Toggle file tag

#zn: Disable file info
#za: View file size and time
#zr: Reverse file order
#zs: Display file size
#zt: Display file time

## Selection
#Space: Select a file
#v: Invert selection
#u: Unselect
map b glob-select
map B glob-unselect

## Search
map h search-next
map H search-next

# Creates a new file and opens it in editor
cmd newfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# Creates new folder with selected files
cmd newfold ${{
    set -f
    read newd
    printf "Directory name: "
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

# Changes file permissions for every selected file
cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

# Archive bindings
## Unzips currently selected file
cmd unarchive ${{
  case "$f" in
      *.zip)     unzip "$f" ;;
      *.tar.gz)  tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar)     tar -xvf "$f" ;;
      *.7z)      7z x "$f"
      *.rar)     unrar x "$f"
      *)         echo "Unsupported format" ;;
  esac
}}

## Compresses file in different ways
cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Outputs the lowercase name of a file.
# For working with wine
cmd lowercasename ${{
    if [ -z "$fs" ]; then
        mv "$f" $(echo "$f" | tr '[:upper:]' '[:lower:]')
    fi
}}

# Opens all filenames in vim and to edit the names
cmd batch_rename !{{
  contentsfile=$(mktemp)
  trap 'rm $contentsfile' INT TERM EXIT
  dircontents="$(command ls -1p)"
  printf "%s" "$dircontents" | nl -n ln > "$contentsfile";
  $EDITOR "$contentsfile"
  printf "%s" "$dircontents" | paste -d '\t' "$contentsfile" - \
  | while read -r line; do
    orig="$(printf "%s" "$line" | cut -f3 | sed 's!/$!!')"
    new="$(printf "%s" "$line" | cut -f2 | sed 's!/$!!')"
    if [ "$new" != "$orig" ]; then
      if [ -e "$new" ]; then
        printf "%s already exists, not overwriting.\n" "$new"
      else
        printf "./%s -> ./%s\n" "$orig" "$new"
        command mv -i ./"$orig" ./"$new"
      fi
    fi
  done
  rm "$contentsfile"
  trap - INT TERM EXIT
}}

# Changes paste to use rsync to show copy progress
# cmd paste &{{
#     set -- $(cat ~/.local/share/lf/files)
#     mode="$1"
#     shift
#     case "$mode" in
#         copy)
#             rsync -av --ignore-existing --progress -- "$@" . |
#             stdbuf -i0 -o0 -e0 tr '\r' '\n' |
#             while IFS= read -r line; do
#                 lf -remote "send $id echo $line"
#             done
#             ;;
#         move) mv -n -- "$@" .;;
#     esac
#     rm ~/.local/share/lf/files
#     lf -remote "send clear"
# }}

# Like mv, but it merges already existing directories.
# Does not work if destination and source are on different filesystems.
cmd mergedirs &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            cp -rf "$@" .
        ;;
        move)
            cp -rfl "$@" .
            rm -rf "$@"
        ;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
    lf -remote "send $id reload"
}}

# TODO: Bind
# paste as a symbolic link to original
cmd paste_link %{{
  if [ "$(wc -l < ~/.local/share/lf/files)" -gt 1 ]; then
    while read -r file; do
      case "$file" in
        copy|move) ;;
        *)
          ln -s "$file" .
          ;;
      esac
    done < ~/.local/share/lf/files
  else
    lf -remote "send $id echo no files to link."
  fi
}}

# TODO: Broken
# cmd z %{{
#     result="$(zoxide query --exclude "${PWD}" -- "$@")"
#     lf -remote "send ${id} cd '${result}'"
# }}

cmd zi ${{
    result="$(zoxide query -i -- "$@")"
    lf -remote "send ${id} cd '${result}'"
}}
